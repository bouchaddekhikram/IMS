pipeline {
    agent any

    environment {
        DOCKER_REGISTRY = 'https://index.docker.io/v1/'
        DOCKER_IMAGE_FRONTEND = 'wajdiraouafi/frontend-ims'
        DOCKER_TAG = 'latest' // You can change this to your desired tag
        DOCKER_CREDENTIALS_ID = 'docker-hub-credentials' // The ID of your Docker credentials in Jenkins
    }
    tools {
        nodejs 'NodeJS20'
    }
//
    stages {
    // stage('Checkout') {
    //         steps {
    //             checkout scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/WajdiRaouafi/IMS']])
    //         }
    //     }
        stage('Frontend - Build') {
            steps {
                // Build the frontend project using npm
                dir('Frontend') {
                    sh 'npm install'
                    sh 'npm run build'
                }
            }
        }
        stage('Frontend - SonarQube Analysis') {
            steps {
                script {
                    withSonarQubeEnv('SonarQube') { 
                        dir('Frontend') {
                            // Run Sonar Scanner for the frontend
                            sh """
                            sonar-scanner \
                                -Dsonar.projectKey=frontend-ims \
                                -Dsonar.sources=src \
                                -Dsonar.host.url=http://localhost:9000
                            """
                        }
                    }
                }
            }
        }
        stage('Frontend - Build Docker Image') {
            steps {
            // Build frontend Docker image
                script {
                    dir('Frontend') {
                        sh "docker build -t ${DOCKER_IMAGE_FRONTEND}:${DOCKER_TAG} -f Dockerfile ."
                    }
                }
            }
        }

        stage('Frontend - Push Docker Image') {
            steps {
                // Push frontend Docker image to registry
                script {
                    withCredentials([usernamePassword(credentialsId: "${DOCKER_CREDENTIALS_ID}", usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh "echo \$DOCKER_PASSWORD | docker login ${DOCKER_REGISTRY} -u \$DOCKER_USERNAME --password-stdin"
                        sh "docker push ${DOCKER_IMAGE_FRONTEND}:${DOCKER_TAG}"
                    }
                }
            }
        }

        stage('triggerBackend-ims-Job') {
            steps {
                build job: "Backend-ims", wait: false
            }
        }

       
    }

    post {
        always {
            cleanWs()   // Clean up workspace after the build
        }
        success {
            echo 'Pipeline executed successfully!'
        }
        failure  {
            echo 'Pipeline execution failed'
        }
    }
}
